{"version":3,"sources":["ItemTypes.js","Card.js","renderCard.js","Leaf.jsx","renderLeaf.js","Container.jsx","index.js"],"names":["ItemTypes","file","id","iconStyle","iconURL","folder","style","remSize","window","getComputedStyle","document","documentElement","replace","Card","idx","card","text","index","parent","fileType","timestamp","API","config","expanded","sons","console","log","JSON","stringify","useState","Date","now","setUpdate","stateQuadrant","updateQuadrant","tryToMove","item","monitor","isOverCurrent","ref","current","tryToSwapNodes","useRef","useDrop","accept","collect","handlerId","getHandlerId","isOver","shallow","drop","mode","hover","hoverBoundingRect","getBoundingClientRect","height","bottom","top","hoverMiddleX","left","right","hoverMiddleY","clientOffset","getClientOffset","hoverClientX","x","hoverClientY","y","quadrant","gutterTop","gutterBottom","treeType","useDrag","type","isDragging","drag","opacity","getBG","paddingLeft","gutterLeft","paddingTop","paddingBottom","handleAdd","addChildren","handleRemove","deleteNode","handleToggleVisibility","toggleVisibility","getHandleStyle","transform","transition","className","topHandleStyle","position","width","backgroundColor","marginTop","marginLeft","drawTopHandle","onClick","src","icon","getIcon","bottomHandleStyle","drawBottomHandle","renderCard","i","numSiblings","getID","children","timeStamp","getTimeStamp","getFileType","Leaf","moveCard","length","map","cardc","renderLeaf","comparisonFn","prevProps","nextProps","React","memo","getFastData","visible","Preprocess","tree","name","options","callback","quadrantSize","walkTree","newData","subtree","parentID","fast","lastUpdate","treename","lastID","preProcessData","data","Container","state","setState","stateRef","getData","updateState","newState","from","getNodeIndex","getPath","ID","path","search","push","followPath","draft","depth","route","traverseAndRemoveFromFast","parentNode","updateSiblings","delta","Math","max","removeNode","remove","splice","addNode","childNode","isRoot","useCallback","childID","nextState","produce","currIndex","swapNodes","dragID","hoverID","pathD","pathH","routeD","routeH","dragIndex","tempNode","hoverIndex","pushNode","rel","dragRoute","hoverRoute","ans","isSibling","isAncestor","isSon","isBefore","isExactlyBefore","isExactlyAfter","DL","HL","smaller","min","coincidence","diff","getNodeRelationship","treePush","nodeID","hackAttribute","App","DndProvider","backend","HTML5Backend","CallbackVisualizer","areaState","setArea","undefined","value","rootElement","getElementById","render"],"mappings":"mNAAaA,EAAY,CACrBC,KAAO,CAACC,GAAG,OAAOC,UAAU,OAAQC,QAAQ,oBAC5CC,OAAQ,CAACH,GAAG,SAASC,UAAU,SAAUC,QAAQ,uB,OCK/CE,EAAQ,GAgBNC,EAAUC,OAAOC,iBAAiBC,SAASC,iBAAiB,aAAaC,QAAQ,KAAK,IAuT/EC,EAnTF,SAAC,GAA+F,IAA9FC,EAA6F,EAA7FA,IAAKZ,EAAwF,EAAxFA,GAAIa,EAAoF,EAApFA,KAAMC,EAA8E,EAA9EA,KAAMC,EAAwE,EAAxEA,MAAUC,EAA8D,EAA9DA,OAAmBC,GAA2C,EAAtDC,UAAsD,EAA3CD,UAAUE,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,KAE9FC,QAAQC,IAAI,cAAgBV,EAAO,SAAWF,EAAM,aAAcP,EAAS,aAAaoB,KAAKC,UAAUN,IAEvG,MAA4BO,mBAASC,KAAKC,OAA1C,mBAAeC,GAAf,WACA,EAAwCH,mBAAS,GAAjD,mBAAOI,EAAP,KAAsBC,EAAtB,KAEMC,EAAY,SAACC,EAAMC,GAKjBC,GAKCC,EAAIC,SAGTnB,EAAIoB,eAAeL,EAAKtB,IAAKA,EAAKmB,IAIhCM,EAAMG,iBAAO,MAGnB,GAFoBA,iBAAO,MAE2BC,YAAQ,CAC1DC,OAAQ5C,EAAUC,KAAKC,GACvB2C,QAF0D,SAElDR,GAER,MAAO,CACCS,UAAWT,EAAQU,eACnBC,OAAQX,EAAQW,SAChBV,cAAeD,EAAQW,OAAO,CAAEC,SAAS,MAGjDC,KAV0D,SAUrDd,EAAMC,GAEPZ,QAAQC,IAAI,eACM,SAAfJ,EAAO6B,MAENhB,EAAUC,IAKlBgB,MApB0D,SAoBpDhB,EAAMC,GAAU,IAAD,EAGjB,GAAKE,EAAIC,SAGLJ,EAAKtB,MAAQA,EAAjB,CASA,IAAMuC,EAAiB,UAAGd,EAAIC,eAAP,aAAG,EAAac,wBAEjCC,EAASF,EAAkBG,OAASH,EAAkBI,IAGtDC,GAFQL,EAAkBM,KAAON,EAAkBO,OAE5B,EACvBC,EAAeN,EAAS,EAExBO,EAAezB,EAAQ0B,kBAEvBC,EAAeF,EAAaG,EAAIZ,EAAkBM,KAClDO,EAAeJ,EAAaK,EAAId,EAAkBI,IAIpDW,GAAYF,EAAcL,EAAa,EAAE,IAAQG,EAAaN,EAAa,EAAE,GAQ9EQ,EAAe3D,EAAQe,EAAO+C,WAAaH,EAAgBX,EAAShD,EAAQe,EAAOgD,eAElFF,EAAW,GAGO,SAAnB9C,EAAOiD,UAGHpD,GAAYnB,EAAUK,OAAOH,IAAmB,IAAbkE,IAMvCA,IAAanC,GAGZC,EAAgBkC,GAKF,UAAf9C,EAAO6B,MAGVhB,EAAUC,SAnFlB,0BAAUU,EAAV,EAAUA,UAAmBR,GAA7B,EAAqBU,OAArB,EAA6BV,eAAiBY,EAA9C,KA0FA,EAA+BsB,YAAQ,CACnCC,KAAMzE,EAAUC,KAAKC,GACrBkC,KAAM,WACF,MAAO,CAAElC,KAAIe,QAAOC,SAAQc,YAAWlB,QAE3C+B,QALmC,SAK3BR,GAEJ,MAAO,CACPqC,WAAYrC,EAAQqC,iBAR5B,mBAASA,EAAT,KAASA,WAAcC,EAAvB,KAaMC,EAAUF,EAAa,EAAI,GAEnB,WAIX,IAAIpC,GAA8B,SAAbhB,EAAO6B,OAUP0B,GAMxBF,EAAKzB,EAAKX,IAIVjC,EAAMwE,YAAYxD,EAAOyD,WAAW,MACpCzE,EAAM0E,WAAW1D,EAAO+C,UAAU,MAClC/D,EAAM2E,cAAc3D,EAAOgD,aAAa,MAExC,IAkDMY,EAAY,WACd7D,EAAI8D,YAAYrE,IAIdsE,EAAe,WACjB/D,EAAIgE,WAAWvE,IAKbwE,EAAwB,WAExB9D,GAAM,GAETH,EAAIkE,iBAAiBzE,IAiBlB0E,EAAgB,WAEjB,MAAO,CACRC,UAAUlE,EAAS,gBAAgB,eACnCmE,WAAY,yBAsClB,OACU,qBAAKC,UAAU,iBAAf,SACI,sBAAKA,UAAW,QAvDhBrD,GAAmC,IAAlBL,EAuDsB,cAAc,IAAKM,IAAKA,EAAKjC,MAAK,2BAAOA,GAAP,IAAcsE,YAAW,kBAAiB9B,EAAnH,UA9HU,WAElB,IAAGR,GAAoC,IAAlBL,GAAyC,IAAlBA,EAoBvC,MAAO,GAjBR,IAAM2D,EACN,CACIC,SAAS,WACTtC,OAAOhD,EAAQe,EAAO+C,UAAU,KAChCyB,MAAM,OACNC,gBAAgB,UAChBC,UAAU,IAAI1E,EAAO+C,UAAU,MAC/B4B,WAAW,IAAI3E,EAAOyD,WAAW,OAGrC,OACI,qBAAKzE,MAAOsF,IA+GPM,GAGD,sBAAKP,UAAU,QAAf,UAfTnE,GAAM,EAEL,mBAAGlB,MAAOkF,IAAkBG,UAAU,SAAtC,SAA+C,0CAGvC,mBAAGrF,MAAOkF,IAAkBG,UAAU,SAASQ,QAASb,EAAxD,SAAgF,+BAAO,QAYnF,qBAAKK,UAAW,QAAQ3F,EAAUmB,GAAUhB,UAAWiG,IA1D3D,WACf,IAAD,EAGI,OAFS,UAAGrF,EAAKsF,YAAR,QAAerG,EAAUmB,GAAUf,QAwDgCkG,KAC5D,mBAAGX,UAAW,OAAd,SAAuB3E,IACnB,uBArCG,SAAnBM,EAAOiD,UAA0C,SAAnBjD,EAAOiD,UAAuBpD,IAAanB,EAAUK,OAAOH,GAE1F,wBAAQiG,QAASjB,EAAWS,UAAU,aAAtC,yBAEQ,GAKJ,mCACJ,wBAAQQ,QAASf,EAAcO,UAAU,gBAAzC,mCAlFiB,WAErB,IAAGrD,GAAoC,IAAlBL,GAAyC,IAAlBA,EAoBvC,MAAO,GAjBR,IAAMsE,EACN,CACIV,SAAS,WACTtC,OAAOhD,EAAQe,EAAOgD,aAAa,KACnCwB,MAAM,OACNC,gBAAgB,UAEhBE,WAAW,IAAI3E,EAAOyD,WAAW,OAGrC,OACI,qBAAKzE,MAAOiG,IAiGPC,SClUd,SAASC,EAAY1F,EAAM2F,EAAGrF,EAAKC,EAAQC,EAAUoF,GACxD,OAAQ,cAAC,EAAD,CAAM7F,IAAKO,EAAIuF,MAAM7F,EAAKb,IAAKa,KAAMA,EAAoBE,MAAOyF,EAAGxG,GAAIa,EAAKb,GAAIc,KAAMD,EAAKC,KAAM6F,SAAU9F,EAAK8F,SAAUxF,IAAKA,EAAMyF,UAAYzF,EAAI0F,aAAahG,EAAKb,IAAMiB,SAAUE,EAAI2F,YAAYjG,EAAKb,IAAKoB,OAAQA,EAAQC,SAAUA,EAAUC,KAAMmF,GAA3M5F,EAAKb,ICKjE,IAAM+G,EAAO,SAAC,GACd,EADenG,IACf,EADoBZ,GACnB,IADuBa,EACxB,EADwBA,KAAYE,GACpC,EAD8BD,KAC9B,EADoCC,OAAkB4F,GACtD,EAD2CK,SAC3C,EADsDL,UAAkBtF,GACxE,EADgEL,OAChE,EADwEK,UAAqBF,GAC7F,EADkFD,UAClF,EAD6FC,KAAKC,EAClG,EADkGA,OAKhG,OACU,sBAAKqE,UAAU,OAAf,UACI,8BACIc,EAAW1F,EAAME,EAAOI,EAAKC,EAAQC,EAAUsF,EAASM,UAI3DN,GAAUtF,EACP,8BACKsF,EAASO,KAAI,SAACC,EAAMX,GAAP,OAAaY,EAAWD,EAAOX,EAAErF,EAAKC,QAE3D,SAUTiG,EAAe,SAAUC,EAAWC,GAapC,OAAQD,EAAUzG,OAAS0G,EAAU1G,MAG9B2G,MAAMC,KAAKV,EAAMM,GC5CjBD,EALI,SAACvG,EAAME,EAAOI,EAAKC,GAElC,OAAQ,cAAC,EAAD,CAAMR,IAAKO,EAAIuF,MAAM7F,EAAKb,IAAKa,KAAMA,EAAoBE,MAAOA,EAAOf,GAAIa,EAAKb,GAAIc,KAAMD,EAAKC,KAAM6F,SAAU9F,EAAK8F,SAAUxF,IAAKA,EAAKE,SAAUF,EAAIuG,YAAY7G,EAAKb,IAAI2H,QAASf,UAAYzF,EAAI0F,aAAahG,EAAKb,IAAKoB,OAAQA,GAAnLP,EAAKb,KCC3DI,EAAQ,GAYDwH,EAAa,SAAC,GAC1B,IAAD,YAD4BC,EAC5B,EAD4BA,KAAKC,EACjC,EADiCA,KAAMC,EACvC,EADuCA,QAASC,EAChD,EADgDA,SAExC5G,EAAS,CAET6B,KAAI,UAAC8E,EAAQ9E,YAAT,QAAiB,QACrBkB,UAAS,UAAI4D,EAAQ5D,iBAAZ,QAAyB,GAClCC,aAAY,UAAE2D,EAAQ3D,oBAAV,QAA0B,GACtCS,WAAU,UAAEkD,EAAQlD,kBAAV,QAAwB,EAClCoD,aAAY,UAACF,EAAQE,oBAAT,QAAyB,EACrC5D,SAAQ,UAAE0D,EAAQ1D,gBAAV,QAAsB,QAiB5B6D,EAAW,SAAXA,EAAYL,EAAMM,EAASnH,GAG7B,IAAI,IAAIwF,EAAE,EAAEA,EAAEqB,EAAKlB,SAASM,OAAOT,IAClC,CAAC,IAAD,EAIgC,EAHxB4B,EAAUP,EAAKlB,SAASH,GACxB6B,EAAUP,EAAOM,EAAQpI,GAE7B,GADAmI,EAAQG,KAAKD,GAAY,CAACE,WAAa,EAAIZ,QAAO,UAAES,EAAQT,eAAV,SAA0B3G,OAAOA,EAAQD,MAAMyF,GAC5E,SAAlBpF,EAAOiD,SAEP8D,EAAQG,KAAKD,GAAUpH,SAAvB,UAAkCmH,EAAQnH,gBAA1C,QAAsDnB,EAAUK,OAAOH,GAG1EkI,EAASE,EAASD,EAASE,KAOhCF,EAAS,CAACK,SAASV,EAAMQ,KAAK,GAAIG,OAAO,GAK7C,OAtCsB,SAACN,GAGlBA,EAAQN,KAAOA,EAEfK,EAASL,EAAMM,EAAS,IA+B7BO,CAAeP,GAEP,cAAC,EAAD,CAAWQ,KAAMR,EAAS/G,OAAQA,EAAQ4G,SAAUA,KAQ1DY,EAAY,SAAC,GAA6B,IAA5BD,EAA2B,EAA3BA,KAAMvH,EAAqB,EAArBA,OAAO4G,EAAc,EAAdA,SAG1B,EAA0BrG,mBAASgH,GAAnC,mBAAOE,EAAP,KAAcC,EAAd,KACMC,EAAWvG,iBAAOqG,GAErBb,IAECA,EAAS1F,QAAQ0G,QAAU,WAEvB,OAAOD,EAASzG,QAAQuF,OAIrB,WAEP,OAAOgB,EAAMhB,MAIjB,IAAMoB,EAAc,SAASC,GAExBH,EAASzG,QAAU4G,EACnBJ,EAASI,IAWTxC,EAAO,SAAC1G,GACZ,IADgBmJ,EACjB,uDADwBJ,EAASzG,QAE7B,OAAQ6G,EAAKX,SAASxI,GAGpBoJ,EAAe,SAACpJ,GACrB,IADyBmJ,EAC1B,uDADiCJ,EAASzG,QAEzC,OAAO6G,EAAKb,KAAKtI,GAAIe,OA4BhBsI,EAAU,SAASC,GAKpB,IAJJ,IAD4BH,EAC7B,uDADoCJ,EAASzG,QAEpCiH,EAAO,CAACJ,EAAKb,KAAKgB,GAAIvI,OACtByI,EAAQL,EAAKb,KAAKgB,GAEC,KAAjBE,EAAOxI,QAGTwI,EAASL,EAAKb,KAAKkB,EAAOxI,QAC1BuI,EAAKE,KAAKD,EAAOzI,OAGrB,OAAOwI,GAONG,EAAc,SAACC,EAAOC,EAAOL,GAG9B,IADA,IAAIM,EAAQF,EAAM9B,KACVrB,EAAE+C,EAAKtC,OAAO,EAAGT,GAAG,EAAEoD,EAAMpD,IAEhCqD,EAAQA,EAAMlD,SAAS4C,EAAK/C,IAEhC,OAAOqD,GAaNC,EAA4B,SAA5BA,EAA6BH,EAAOI,GAGrC,IAAI/J,EAAK+J,EAAW/J,UAEb2J,EAAMrB,KAAK5B,EAAM1G,IAL0B,oBAO/B+J,EAAWpD,UAPoB,IAOlD,IAAI,EAAJ,qBACA,CACImD,EAA0BH,EAD9B,UARkD,gCAoBjDK,EAAgB,SAACL,EAAOI,EAAYhJ,EAAOkJ,GAIxCC,KAAKC,IAAIpJ,EAAM,GACvB,IADA,IACQyF,EAAEzF,EAAMyF,EAAEuD,EAAWpD,SAASM,OAAOT,IAGzCmD,EAAMrB,KAAK5B,EAAMqD,EAAWpD,SAASH,GAAGxG,KAAKe,OAAOkJ,GAelDG,EAAa,SAACT,EAAOI,EAAYhJ,GAAwB,IAAjBsJ,IAAgB,yDAGvDA,GAECP,EAA0BH,EAAOI,EAAWpD,SAAS5F,IAGzDgJ,EAAWpD,SAAS2D,OAAOvJ,EAAM,GAEjCiJ,EAAeL,EAAOI,EAAYhJ,GAAQ,IAIxCwJ,EAAS,SAACZ,EAAOI,EAAYS,EAAWzJ,GAK1CgJ,EAAWpD,SAAS2D,OAAOvJ,EAAO,EAAGyJ,GAErCR,EAAeL,EAAOI,EAAWhJ,EAAM,EAAG,GAG1C4I,EAAMrB,KAAK5B,EAAM8D,EAAUxK,GAAG2J,IAAQ5I,MAAQA,EAE9C4I,EAAMrB,KAAK5B,EAAM8D,EAAUxK,GAAG2J,IAAQ3I,OAAS+I,EAAWU,OAAO,GAAG/D,EAAMqD,EAAW/J,GAAG2J,IAuEvFxE,EAAauF,uBAAY,SAAAC,GAE9B,IAAIpB,EAAOF,EAAQsB,GAEbC,EAAYC,YAAQ9B,EAASzG,SAAS,SAAAqH,GAExC,IAAIE,EAAQH,EAAWC,EAAO,EAAGJ,GAE7BuB,EAAY1B,EAAauB,EAAShB,GAEtCS,EAAWT,EAAOE,EAAOiB,GAAW,MAKxC7B,EAAY2B,KAKX,IAQIG,EAAYL,uBAAY,SAACM,EAAQC,EAAShI,GAI/C,IAAIiI,EAAQ7B,EAAQ2B,GAChBG,EAAQ9B,EAAQ4B,GAEdL,EAAYC,YAAQ9B,EAASzG,SAAS,SAAAqH,GAGxC,IAAIyB,EAAS1B,EAAWC,EAAO,EAAGuB,GAE9BG,EAAiB3B,EAAWC,EAAb,GAAN1G,EAA0B,EAA8B,EAA3BkI,GAGtCG,EAAYlC,EAAa4B,EAAQrB,GAEjC4B,EAAWH,EAAOzE,SAAS2E,GAI3BE,EAAapC,EAAa6B,GAM9B,OAJAb,EAAWT,EAAOyB,EAAOE,GAAW,GAI7BrI,GAEH,KAAK,EAAEsH,EAAQZ,EAAO0B,EAAQE,EAAYC,GAAY,MACtD,KAAK,EAAEjB,EAAQZ,EAAO0B,EAAQE,EAAYC,EAAW,GAAG,MACxD,KAAK,GA5HI,SAAC7B,EAAOI,EAAYS,GAEjC,IAAIzJ,EAAQgJ,EAAWpD,SAASM,OAChC8C,EAAWpD,SAAS8C,KAAKe,GACzBb,EAAMrB,KAAK5B,EAAM8D,EAAUxK,GAAG2J,IAAQ5I,MAAQA,EAC9C4I,EAAMrB,KAAK5B,EAAM8D,EAAUxK,GAAG2J,IAAQ3I,OAAS+I,EAAWU,OAAO,GAAG/D,EAAMqD,EAAW/J,GAAG2J,GAuH7E8B,CAAS9B,EAAO0B,EAAQE,OAOvCtC,EAAY2B,MAKNrI,EAAiBmI,uBAAY,SAACM,EAAQC,EAAS/G,GAEhD,IAGGwH,EAlIoB,SAACC,EAAWC,GAgBpC,IAdA,IAAIC,EAAM,CACNC,WAAU,EACVC,YAAY,EACZC,OAAM,EACNC,UAAS,EACTC,iBAAgB,EAChBC,gBAAe,GAGfC,EAAKT,EAAU1E,OACfoF,EAAKT,EAAW3E,OAChBqF,EAAUpC,KAAKqC,IAAIH,EAAIC,GACvBG,EAAc,EAEVhG,EAAI,EAAGA,EAAE8F,GAEVX,EAAUS,EAAG5F,EAAE,IAAMoF,EAAWS,EAAG7F,EAAE,GAFnBA,IAIjBgG,IASR,GAAGA,IAAgBF,EACnB,CAAC,IAAD,EACgC,CAACA,IAAYF,EAAIE,IAAYD,GAAxDR,EAAIE,WADT,KACqBF,EAAIG,MADzB,KAKA,GAAIK,IAAKD,GAAOI,IAAiBF,EAAQ,EACzC,CACI,IAAIG,EAAOd,EAAU,GAAKC,EAAW,GADzC,EAG+E,EAAC,EAAOa,EAAK,GAAY,IAATA,EAAmB,IAAPA,GAAtGZ,EAAIC,UAHT,KAGoBD,EAAII,SAHxB,KAGkCJ,EAAIK,gBAHtC,KAGuDL,EAAIM,eAH3D,KAQA,OAAON,EAsFGa,CAHGrD,EAAQ2B,GACT3B,EAAQ4B,IAKpB,IAAGS,EAAIK,WAKP,OAAO7H,GAEH,KAAK,EAAE,MAEP,KAAK,EACL,KAAK,EACEwH,EAAIO,UAEFP,EAAIQ,iBAAmBnB,EAAUC,EAAQC,EAAS,GAInDF,EAAUC,EAAQC,EAAS,GAI/B,MACJ,KAAK,EACL,KAAK,EACD,GAAGS,EAAIS,eACC,MAELT,EAAIQ,gBACHnB,EAAUC,EAAQC,EAAS,GAG3BF,EAAUC,EAAQC,EAAS,GAG/B,MACJ,KAAK,EACDF,EAAUC,EAAQC,EAAS,OAelChG,EAAcyF,uBAAY,SAACrC,GAG5B,IAAIkB,EAAOF,EAAQhB,GAEbuC,EAAYC,YAAQ9B,EAASzG,SAAS,SAAAqH,GAIxCA,EAAMlB,SAIN,IAAIoB,EAAQH,EAAWC,EAAO,EAAGJ,GAGjCI,EAAMrB,KAAKqB,EAAMnB,SAASmB,EAAMlB,QAAS,CAAEd,SAAQ,EAAM3G,OAAOqH,EAAUtH,MAAO8I,EAAMlD,SAASM,QAE3E,SAAlB7F,EAAOiD,WAENsF,EAAMrB,KAAKqB,EAAMnB,SAASmB,EAAMlB,QAAQxH,SAAWnB,EAAUK,OAAOH,IAKxE,IAAI2M,EAAW,CAAC7E,KAAK,aAAa6B,EAAMlB,OAAQ3H,KAAK,cAAc6I,EAAMlB,OAAQzI,GAAG2J,EAAMlB,OAAQ9B,SAAS,IAC3GkD,EAAMlD,SAAS8C,KAAKkD,MAKxB1D,EAAY2B,KAOf,IAEGvF,EAAoBqF,uBAAY,SAACkC,GAErC,IAAIrD,EAAOF,EAAQuD,GAEbhC,EAAYC,YAAQ9B,EAASzG,SAAS,SAAAqH,GAExC,IAAIE,EAAQH,EAAWC,EAAO,EAAGJ,GAEjChI,QAAQC,IAAIC,KAAKC,UAAUiI,EAAMrB,OACjC/G,QAAQC,IAAI,WAAakF,EAAMkG,EAAOjD,IAEtCA,EAAMrB,KAAKsE,GAAQjF,SAAYgC,EAAMrB,KAAKsE,GAAQjF,QAI/C,IAAIkF,EAAgBnG,EAAMkG,EAAOjD,GAAO,OAExCE,EAAMgD,GAAe,SAEdhD,EAAMgD,MAKpB5D,EAAY2B,KAEZ,IAKKzJ,EACN,CACCuF,MAAMA,EACNgB,YAnZmB,SAAC1H,GAA+B,IAA3BmJ,EAA0B,uDAAnBJ,EAASzG,QACpC,OAAO6G,EAAKb,KAAK5B,EAAM1G,KAmZ3B6G,aA7YoB,SAAC7G,GACrB,IADyBmJ,EAC1B,uDADiCJ,EAASzG,QAErC,OAAO6G,EAAKb,KAAK5B,EAAM1G,IAAKuI,YA4YhCtD,YAAYA,EACZE,WAAWA,EACX5C,eAAeA,EACf8C,iBAAiBA,EACjByB,YA7YmB,SAAC9G,GACpB,IADwBmJ,EACzB,uDADgCJ,EAASzG,QAEpC,OAAO6G,EAAKb,KAAK5B,EAAM1G,IAAKiB,WAoZhC,OAAQ,mCACD,qBAAKwE,UAAU,WAAWrF,MAAOA,EAAjC,SAAyCyI,EAAMhB,KAAKlB,SAASO,KAAI,SAACrG,EAAM2F,GAAP,OAAaY,EAAWvG,EAAM2F,EAAGrF,EAAKC,W,gBChchHyG,EAAO,CACT4C,QAAO,EACP9D,SACA,CACI,CACI7F,KAAK,eACLd,GAAG,EACH2G,SAAS,CAAC,CACN7F,KAAK,YACLd,GAAG,EACH2G,SAAS,GACT1F,SAAS,QAEb,CACIH,KAAK,cACLd,GAAG,EACH2G,SAAS,MAGjB,CACI7F,KAAK,UACLd,GAAG,EACH2G,SAAS,IAEb,CACI7F,KAAK,UACLd,GAAG,EACH2G,SAAS,IAEb,CACE7F,KAAK,UACLd,GAAG,EACF2G,SAAS,IAEd,CACE7F,KAAK,WACLd,IAAI,EACH2G,SAAS,MAUjB,SAASmG,IAEN,IAAM9E,EAAWxF,iBAAO,IAE1B,OACC,sBAAKiD,UAAU,MAAf,UACC,cAACsH,EAAA,EAAD,CAAaC,QAASC,IAAtB,SACC,cAAC,EAAD,CAASpF,KAAMA,EAAMC,KAAM,WAAYC,QAAS,CAAC9E,KAAK,OAAQkB,UAAU,EAAKC,aAAa,GAAI4D,SAAUA,MAErG,8BACE,cAAC,EAAD,CAAoBA,SAAUA,SAfpCzG,QAAQC,IAAI,cAAgBC,KAAKC,UAAUmG,IAsB7C,IAAMqF,EAAqB,SAAC,GAC3B,IAD4BlF,EAC7B,EAD6BA,SAE3B,EAA6BrG,mBAAS,IAAtC,mBAAOwL,EAAP,KAAkBC,EAAlB,KAQA,OACE,qCACA,wBAAQnH,QARS,WAEjB1E,QAAQC,IAAI,iBAAkBC,KAAKC,UAAUsG,EAAS1F,QAAQ0G,YAC9DoE,EAAQ3L,KAAKC,UAAUsG,EAAS1F,QAAQ0G,eAAWqE,EAAW,KAK9D,0BACA,0BAAUC,MAAOH,QAMhBI,EAAc/M,SAASgN,eAAe,QAC5CC,iBAAO,cAACX,EAAD,IAASS,K","file":"static/js/main.cda2cb48.chunk.js","sourcesContent":["export const ItemTypes = {\r\n    file:  {id:'file',iconStyle:'file', iconURL:'./icons/html.png'},\r\n    folder: {id:'folder',iconStyle:'folder', iconURL:'./icons/folder.png'}\r\n  }\r\n  ","import React from 'react';\r\nimport { useRef } from 'react';\r\nimport { useState, useCallback } from 'react';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\nimport { ItemTypes } from './ItemTypes';\r\nimport './Treeview.css'; // Tell webpack that Button.js uses these styles\r\n\r\nconst style = {\r\n    //  border: '1px dashed gray',\r\n      /*paddingTop: '0.5rem',\r\n      paddingRight: '0.0rem',\r\n      paddingBottom: '0.0rem',\r\n      paddingLeft: '1.0rem',\r\n      position:'relative',\r\n      boxSizing:'border-box',\r\n      width:'400px',\r\n  \r\n      marginBottom: '0.0rem',\r\n      backgroundColor: 'white',\r\n      cursor: 'move',*/\r\n  };\r\n  \r\n\r\n  const remSize = window.getComputedStyle(document.documentElement)['font-size'].replace(\"px\",\"\");\r\n\r\n\r\n\r\nconst Card = ({idx, id, card, text, index,    parent, timestamp, fileType, API, config, expanded, sons}) => {\r\n\r\n    console.log(\"rendered : \" + text + \" idx: \" + idx + \" remSize: \" +remSize +\" config : \"+JSON.stringify(config));\r\n    \r\n    const [update, setUpdate] = useState(Date.now());\r\n    const [stateQuadrant, updateQuadrant] = useState(0);\r\n\r\n    const tryToMove = (item, monitor)=>\r\n    {\r\n        //console.log(\"try to move!\");\r\n\r\n\r\n        if(!isOverCurrent)return;\r\n\r\n       // console.log(\"returned before is over current\");\r\n\r\n        \r\n        if (!ref.current) {\r\n            return;\r\n        }\r\n        API.tryToSwapNodes(item.idx, idx, stateQuadrant);\r\n\r\n    }\r\n    \r\n    const ref = useRef(null);\r\n    const quadrantRef = useRef(null);\r\n    \r\n    const [{  handlerId, isOver, isOverCurrent }, drop] = useDrop({\r\n        accept: ItemTypes.file.id,\r\n        collect(monitor) {\r\n        \r\n        return {\r\n                handlerId: monitor.getHandlerId(),\r\n                isOver: monitor.isOver(),\r\n                isOverCurrent: monitor.isOver({ shallow: true })\r\n            };\r\n        },\r\n        drop(item, monitor){\r\n            \r\n            console.log(\"drop called\");\r\n            if(config.mode ===\"drop\")\r\n            {\r\n                tryToMove(item, monitor);\r\n\r\n\r\n            }\r\n        },\r\n        hover(item, monitor) {\r\n\r\n\r\n            if (!ref.current) {\r\n                return;\r\n            }\r\n            if (item.idx === idx) {\r\n                return;\r\n            }\r\n\r\n\r\n            //if file mode\r\n   \r\n\r\n            // Determine rectangle on screen\r\n            const hoverBoundingRect = ref.current?.getBoundingClientRect();\r\n\r\n            const height = hoverBoundingRect.bottom - hoverBoundingRect.top;\r\n            const width = hoverBoundingRect.left - hoverBoundingRect.right;\r\n            // Get vertical middle\r\n            const hoverMiddleX = width / 2;\r\n            const hoverMiddleY = height / 2;\r\n            // Determine mouse position\r\n            const clientOffset = monitor.getClientOffset();\r\n            // Get pixels to the top\r\n            const hoverClientX = clientOffset.x - hoverBoundingRect.left;\r\n            const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n      \r\n            //console.log(\"tried to swap nodes hover test\");\r\n    \r\n            let quadrant = (hoverClientY> hoverMiddleY?2:0)   + (hoverClientX<hoverMiddleX?1:2); \r\n\r\n\r\n            /**\r\n             *  doing a state update here BUT it won't be done on mouse over but on quadrant change.\r\n             */\r\n            //\r\n\r\n            if(hoverClientY > remSize*config.gutterTop && hoverClientY < (height - remSize*config.gutterBottom))\r\n            {\r\n                quadrant = 5;\r\n            }\r\n\r\n            if(config.treeType ===\"file\")\r\n            {\r\n                //if hover isn't a folder\r\n                if(fileType != ItemTypes.folder.id && quadrant === 5)\r\n                {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if(quadrant !== stateQuadrant)\r\n            {\r\n                //state change for cosmetic effects to take hold.\r\n                updateQuadrant( quadrant );\r\n            }\r\n\r\n\r\n            //don't change on hover if the mode is not hover\r\n            if(config.mode !==\"hover\")\r\n                return;\r\n\r\n            tryToMove(item, monitor)\r\n\r\n\r\n\r\n\r\n        }\r\n    });\r\n    const [{ isDragging }, drag] = useDrag({\r\n        type: ItemTypes.file.id,\r\n        item: () => {\r\n            return { id, index, parent, setUpdate, idx };\r\n        },\r\n        collect(monitor) {\r\n           \r\n            return {\r\n            isDragging: monitor.isDragging(),\r\n            };\r\n            \r\n        },\r\n    });\r\n    const opacity = isDragging ? 0 : 1;\r\n    \r\n    const getBG = ()=>\r\n    {\r\n\r\n\r\n       if(!isOverCurrent || config.mode==\"hover\")\r\n            return 'white';\r\n\r\n            /*\r\n        if(stateQuadrant < 3)\r\n            return 'red';\r\n        else \r\n            return 'blue';*/\r\n    }\r\n\r\n    const backgroundColor = getBG();//isOverCurrent? 'red':'blue';\r\n   \r\n   \r\n    //const backgroundColor =  quadrant >2? 'red':'blue';\r\n    //console.log(\"quandrant value : \" +quadrant)\r\n\r\n    drag(drop(ref));\r\n\r\n\r\n\r\n    style.paddingLeft=config.gutterLeft+\"rem\";\r\n    style.paddingTop=config.gutterTop+\"rem\";\r\n    style.paddingBottom=config.gutterBottom+\"rem\";\r\n\r\n    const drawTopHandle = ()=>\r\n    {\r\n        if(isOverCurrent && (stateQuadrant === 1 || stateQuadrant === 2))\r\n        {\r\n\r\n            const topHandleStyle = \r\n            {\r\n                position:'absolute',\r\n                height:remSize*config.gutterTop+'px',\r\n                width:'100%',\r\n                backgroundColor:'#6097CE',\r\n                marginTop:'-'+config.gutterTop+'rem',\r\n                marginLeft:'-'+config.gutterLeft+'rem'\r\n            }\r\n\r\n            return (\r\n                <div style={topHandleStyle}>\r\n\r\n                </div>\r\n\r\n            );\r\n        }\r\n        else return '';\r\n    }\r\n\r\n    const drawBottomHandle = ()=>\r\n    {\r\n        if(isOverCurrent && (stateQuadrant === 3 || stateQuadrant === 4))\r\n        {\r\n\r\n            const bottomHandleStyle = \r\n            {\r\n                position:'absolute',\r\n                height:remSize*config.gutterBottom+'px',\r\n                width:'100%',\r\n                backgroundColor:'#6097CE',\r\n               // marginTop:'+'+config.gutterTop+'rem',\r\n                marginLeft:'-'+config.gutterLeft+'rem'\r\n            }\r\n\r\n            return (\r\n                <div style={bottomHandleStyle}>\r\n\r\n                </div>\r\n\r\n            );\r\n        }\r\n        else return '';\r\n    }\r\n\r\n    const handleAdd = ()=>{\r\n        API.addChildren(idx);\r\n\r\n\r\n    }\r\n    const handleRemove = ()=>{\r\n        API.deleteNode(idx);\r\n\r\n        \r\n    }\r\n\r\n    const handleToggleVisibility =()=>\r\n    {\r\n       if(sons<=0)\r\n        return;\r\n       API.toggleVisibility(idx);\r\n\r\n    }\r\n\r\n    const isHoverDrop = ()=>\r\n    {\r\n        return (isOverCurrent && stateQuadrant === 5);\r\n    }\r\n\r\n    const getIcon = () =>\r\n    {\r\n        const res = card.icon?? ItemTypes[fileType].iconURL;\r\n        \r\n        return res;\r\n\r\n    }\r\n\r\n    const getHandleStyle =()=>\r\n    {\r\n         return {\r\n        transform:expanded?\"rotate(90deg)\":\"rotate(0deg)\" , \r\n        transition: 'transform 150ms ease', // smooth transition\r\n        }\r\n    }\r\n\r\n    const isFolder = () =>\r\n    {\r\n       return config.treeType ===\"file\" && fileType === ItemTypes.folder.id;\r\n    }\r\n\r\n    const renderAddButton = ()=>\r\n    {\r\n        if( config.treeType !==\"file\" || (config.treeType ===\"file\") && fileType === ItemTypes.folder.id)\r\n        return(\r\n            <button onClick={handleAdd} className=\"button add\">+ Add child</button>\r\n        )\r\n        else return '';\r\n    }\r\n\r\n    const renderRemoveButton =()=>\r\n    {\r\n        return (<>\r\n            <button onClick={handleRemove} className=\"button remove\">x Remove element</button>\r\n           </>\r\n        );\r\n\r\n    }\r\n\r\n    const drawExpandedHandle = () =>\r\n    {\r\n        if(sons<=0)\r\n        return(\r\n            <p style={getHandleStyle()} className=\"handle\"><span>&nbsp;</span></p>\r\n        );\r\n        else{\r\n            return( <p style={getHandleStyle()} className=\"handle\" onClick={handleToggleVisibility}><span>{'>'}</span></p>);\r\n        }\r\n    }\r\n\r\n  return (\r\n            <div className=\"card-container\">\r\n                <div className={\"card\"+ (isHoverDrop()?\" hover-drop\":\"\")} ref={ref} style={{ ...style, opacity }} data-handler-id={handlerId}>\r\n                    {drawTopHandle()} \r\n                    \r\n                    \r\n                    <div className=\"inner\">\r\n                        {drawExpandedHandle()}\r\n                        <img className={\"icon \"+ItemTypes[fileType].iconStyle} src={getIcon()}></img>\r\n                        <p className={\"text\"}>{text}</p>\r\n                            <br />\r\n                            {renderAddButton()}\r\n                            {renderRemoveButton()}\r\n                    </div>\r\n                    {drawBottomHandle()}\r\n                \r\n                </div>\r\n            </div>);\r\n    \r\n\r\n   \r\n};\r\n\r\nexport default Card;","import Card from \"./Card\";\r\n\r\n\r\nexport function renderCard (card, i, API, config, expanded, numSiblings)  {\r\n    return (<Card idx={API.getID(card.id)} card={card} key={card.id} index={i} id={card.id} text={card.text} children={card.children} API={API}  timeStamp ={API.getTimeStamp(card.id)}  fileType={API.getFileType(card.id)} config={config} expanded={expanded} sons={numSiblings}/>);\r\n};\r\n\r\n","import React from 'react';\r\nimport './Treeview.css'; // Tell webpack that Button.js uses these styles\r\nimport { renderCard } from './renderCard';\r\nimport renderLeaf from './renderLeaf'\r\n\r\n\r\n\r\n\r\n\r\nconst Leaf = ({idx, id, card, text, index, moveCard,  children, parent, expanded, timestamp, API, config}) =>\r\n{\r\n\r\n\r\n\r\n  return (\r\n            <div className=\"leaf\">\r\n                <div>\r\n                   {renderCard(card, index, API, config, expanded, children.length)}\r\n                </div>\r\n\r\n               \r\n                {children&&expanded?(\r\n                    <div>\r\n                        {children.map((cardc,i) => renderLeaf(cardc, i,API, config))}\r\n                    </div>)\r\n                :null}\r\n\r\n            </div>);\r\n    \r\n\r\n}\r\n\r\n\r\n\r\n\r\n  const comparisonFn = function (prevProps, nextProps) {\r\n\r\n\r\n       /* console.log(\"the ID \"+prevProps.idx)\r\n        console.log(\"prev TimeStamp \"+prevProps.timeStamp)\r\n        console.log(\"next TimeStamp \"+nextProps.timeStamp) \r\n        console.log(\"prev children \"+JSON.stringify(prevProps.children))\r\n        console.log(\"next children \"+JSON.stringify(nextProps.children))\r\n       \r\n        console.log(prevProps.timeStamp === nextProps.timeStamp?\"yes it's equal\":\"no it's not equal\");\r\n        */\r\n        //console.log(\"prev props: \" +JSON.stringify(prevProps) +\" next props : \" + JSON.stringify(nextProps ))\r\n        //console.log(\"type of : \" +(typeof (prevProps.timestamp)) +\" values again prev: \" +prevProps.timeStamp +\" next props : \" + nextProps.timeStamp + \" idx : \" + nextProps.idx +\" test:  prevT === nextT \"+ (prevProps.timestamp === nextProps.timestamp))\r\n        return (prevProps.card === nextProps.card);\r\n  };\r\n\r\nexport default React.memo(Leaf, comparisonFn);","import Leaf from \"./Leaf\";\r\n\r\nconst renderLeaf = (card, index, API, config) =>\r\n{\r\n    return (<Leaf idx={API.getID(card.id)} card={card} key={card.id} index={index} id={card.id} text={card.text} children={card.children} API={API} expanded={API.getFastData(card.id).visible} timeStamp ={API.getTimeStamp(card.id)} config={config}/>);\r\n}\r\n\r\nexport default renderLeaf;","import { useState, useRef, useCallback } from 'react';\r\nimport produce from \"immer\"\r\nimport renderLeaf from './renderLeaf';\r\nimport { ItemTypes } from './ItemTypes';\r\n\r\nconst style = {\r\n    //width: 400,\r\n};\r\n\r\nlet Controls = ()=>{}\r\n\r\n//example tree:\r\n/*so called pure function processes the data creating a copy with meta data used in fast searches the idea*/\r\n/*is to maintain the data available at all times to be retrievable so it keeps the original data organized in a tree structure, as it comes*/\r\n\r\n\r\n\r\nexport const Preprocess = ({tree,name, options, callback})=>\r\n{\r\n    let config = {\r\n\r\n        mode:options.mode ?? \"hover\",\r\n        gutterTop:   options.gutterTop ?? 0.5, \r\n        gutterBottom: options.gutterBottom ?? 0.5, \r\n        gutterLeft: options.gutterLeft ?? 1.0, \r\n        quadrantSize:options.quadrantSize ?? 1.0,\r\n        treeType: options.treeType ?? \"file\", \r\n    }\r\n\r\n    //launches walkTree.\r\n    const preProcessData =(newData)=>\r\n    {\r\n         \r\n         newData.tree = tree;\r\n\r\n         walkTree(tree, newData, \"\")\r\n\r\n     \r\n\r\n    }\r\n\r\n\r\n    /*walk the tree recursively to create indexes and other artifacts to search the iteams fast*/\r\n    const walkTree = (tree, newData, parent)=>\r\n    {\r\n    \r\n        for(let i=0;i<tree.children.length;i++)\r\n         {\r\n             let subtree = tree.children[i];\r\n             let parentID =name + subtree.id; \r\n             newData.fast[parentID] = {lastUpdate : 0 , visible: subtree.visible?? true, parent:parent, index:i};\r\n             if(config.treeType===\"file\"){\r\n                \r\n                newData.fast[parentID].fileType = subtree.fileType ?? ItemTypes.folder.id;\r\n\r\n             }\r\n             walkTree(subtree, newData, parentID);\r\n\r\n         }\r\n\r\n    }\r\n\r\n    //data skeleton\r\n    let newData ={treename:name, fast:{}, lastID:8};\r\n    \r\n    //data gets processed in this function.\r\n    preProcessData(newData);\r\n    \r\n    return (<Container data={newData} config={config} callback={callback}/>)\r\n}\r\n\r\n//the idea with this representation is avoiding to re-render whole subtrees that are untouched, sometimes these have stale references\r\n//that's why we are using useRef here, to avoid that case.\r\n//fast is an index of sorts to keep track of where the nodes are on the tree, it should be a trie or such data structure to avoid having to walk \r\n//each property on every change\r\n\r\nconst Container = ({data, config,callback}) => {\r\n    {\r\n    \r\n       const [state, setState] = useState(data);\r\n       const stateRef = useRef(state); \r\n        \r\n       if(callback)\r\n       {\r\n           callback.current.getData = ()=>\r\n           {\r\n               return stateRef.current.tree;\r\n           }\r\n       }\r\n       \r\n       Controls = () =>\r\n       {\r\n           return state.tree;\r\n       }\r\n\r\n       //USE REF TO AVOID STALE CALLBACKS\r\n       const updateState = function(newState)\r\n       {\r\n            stateRef.current = newState;\r\n            setState(newState);\r\n       }\r\n\r\n        /*******GENERAL USE FUNCTIONS****/\r\n       /********************************/\r\n      /**********************************************************\r\n       * get ID data\r\n       * @param {number} id - the numeric id of the current Node \r\n       * @returns {String} the internal ID of the node (treename concat id)\r\n       */\r\n       \r\n      const getID= (id, from = stateRef.current) =>\r\n       {\r\n           return  from.treename+id;\r\n       }\r\n\r\n       const getNodeIndex = (id, from = stateRef.current) =>\r\n       {\r\n        return from.fast[id].index\r\n\r\n       }\r\n\r\n       \r\n        /*******GENERAL USE FUNCTIONS****/\r\n       /**************************/\r\n       /****GET FAST DATA****/\r\n       const getFastData = (id, from = stateRef.current)=>{\r\n            return from.fast[getID(id)];\r\n       }\r\n\r\n       /*******GENERAL USE FUNCTIONS****/\r\n       /**************************/\r\n       /****GET TIME STAMP****/\r\n       const getTimeStamp = (id, from = stateRef.current) =>\r\n       {\r\n            return from.fast[getID(id)].lastUpdate;\r\n       }\r\n\r\n       const getFileType = (id, from = stateRef.current) =>\r\n       {\r\n            return from.fast[getID(id)].fileType;\r\n       }\r\n       \r\n         /*******GENERAL USE FUNCTIONS****/\r\n        /********************************/\r\n       /**********GET Path**************/\r\n       const getPath = function(ID, from = stateRef.current)\r\n       {\r\n            let path = [from.fast[ID].index];\r\n            let search =from.fast[ID];\r\n\r\n            while(search.parent !==\"\")\r\n            {\r\n                \r\n                search = from.fast[search.parent];\r\n                path.push(search.index);\r\n\r\n            }\r\n            return path;\r\n            \r\n       }\r\n\r\n         /*******GENERAL USE FUNCTIONS****/\r\n        /**************************/\r\n       /****Follow Path****/\r\n       const followPath = ((draft, depth, path) =>{\r\n\r\n            let route = draft.tree;\r\n            for(let i=path.length-1; i>-1+depth;i--)\r\n            {\r\n                route = route.children[path[i]];\r\n            }\r\n            return route;\r\n\r\n\r\n        });\r\n\r\n\r\n        /*******GENERAL USE FUNCTIONS****/\r\n       /**************************/\r\n       /****traverse tree****/\r\n       /*traverse draft tree to collect all the ids to of elements to remove***/\r\n       /*works on draft object tree leaf*/\r\n       /*traverse draft tree and get all the ids*/\r\n\r\n       const traverseAndRemoveFromFast = (draft, parentNode)=>{\r\n\r\n            //delete from fast\r\n            let id = parentNode.id;\r\n           \r\n            delete draft.fast[getID(id)];\r\n           \r\n            for(let subtree of parentNode.children)\r\n            {\r\n                traverseAndRemoveFromFast(draft, subtree);\r\n            }\r\n            \r\n\r\n\r\n    }\r\n        \r\n       /*******GENERAL USE FUNCTIONS****/\r\n       /**************************/\r\n       /**update siblings*/\r\n\r\n       const updateSiblings =(draft, parentNode, index, delta)=>\r\n       {\r\n\r\n        //TODO\r\n        let i = Math.max(index,0);\r\n        for(let i=index;i<parentNode.children.length;i++)\r\n        {\r\n\r\n            draft.fast[getID(parentNode.children[i].id)].index+=delta; \r\n\r\n        }\r\n\r\n       }\r\n\r\n\r\n\r\n       /*******GENERAL USE FUNCTIONS****/\r\n       /**************************/\r\n       /****Remove leaf****/\r\n       /*Removes a leaf from path also affects the fast object changing the index of the subsequent leaves***/\r\n       /*works on draft object tree leaf*/\r\n       /*Remove for deleting entry of fast if only moving it remove should be false*/\r\n\r\n        const removeNode = (draft, parentNode, index, remove = true)=>{\r\n\r\n\r\n            if(remove)\r\n            {\r\n                traverseAndRemoveFromFast(draft, parentNode.children[index]);\r\n            }\r\n\r\n            parentNode.children.splice(index,1);\r\n            \r\n            updateSiblings(draft, parentNode, index, -1);\r\n\r\n        }\r\n\r\n        const addNode= (draft, parentNode, childNode, index)=>\r\n        {\r\n\r\n            \r\n    \r\n            parentNode.children.splice(index, 0, childNode);\r\n\r\n            updateSiblings(draft, parentNode,index+1, 1);\r\n\r\n            //finally \r\n            draft.fast[getID(childNode.id,draft)].index = index;\r\n\r\n            draft.fast[getID(childNode.id,draft)].parent = parentNode.isRoot?\"\":getID(parentNode.id,draft);\r\n\r\n            \r\n\r\n\r\n        }\r\n        const pushNode = (draft, parentNode, childNode) =>\r\n        {\r\n            let index = parentNode.children.length;\r\n            parentNode.children.push(childNode);\r\n            draft.fast[getID(childNode.id,draft)].index = index;\r\n            draft.fast[getID(childNode.id,draft)].parent = parentNode.isRoot?\"\":getID(parentNode.id,draft);\r\n           \r\n   \r\n        }\r\n\r\n        /**************ANCESTRY FUNCTIONS****************/\r\n        const getNodeRelationship = (dragRoute, hoverRoute) =>\r\n        {\r\n            let ans = {\r\n                isSibling:false,\r\n                isAncestor: false,\r\n                isSon:false,\r\n                isBefore:false,\r\n                isExactlyBefore:false,\r\n                isExactlyAfter:false,\r\n            }\r\n\r\n            let DL = dragRoute.length;\r\n            let HL = hoverRoute.length;\r\n            let smaller = Math.min(DL, HL);\r\n            let coincidence = 0;\r\n\r\n            for(let i = 0; i<smaller;i++)\r\n            {\r\n                if(dragRoute[DL-i-1] == hoverRoute[HL-i-1])\r\n                {\r\n                    coincidence++;\r\n\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if(coincidence === smaller)\r\n            {\r\n                [ans.isAncestor, ans.isSon]=[smaller === DL, smaller === HL ];\r\n\r\n            }\r\n\r\n            if((HL===DL) && coincidence === (smaller-1)  )\r\n            {\r\n                let diff = dragRoute[0] - hoverRoute[0];\r\n               \r\n                [ans.isSibling, ans.isBefore, ans.isExactlyBefore, ans.isExactlyAfter  ] = [true,  diff<0, diff ===-1, diff===1 ];\r\n                \r\n\r\n            }\r\n            \r\n            return ans;\r\n\r\n\r\n        }\r\n\r\n\r\n       /*******STATE AFFECTING FUNCTIONS*******/\r\n       /**************************/\r\n       /****Delete Children****/\r\n\r\n       const deleteNode = useCallback(childID =>{\r\n      \r\n        let path = getPath(childID);\r\n\r\n        const nextState = produce(stateRef.current, draft => {\r\n\r\n            let route = followPath(draft, 1, path);\r\n\r\n            let currIndex = getNodeIndex(childID, draft);\r\n\r\n            removeNode(draft, route, currIndex, true);\r\n\r\n            \r\n        });\r\n\r\n        updateState(nextState);\r\n\r\n\r\n\r\n\r\n       },[]);\r\n\r\n                    \r\n       /*******STATE AFFECTING FUNCTIONS*******/\r\n       /**************************/\r\n       /****swap nodes****/\r\n\r\n\r\n       const swapNodes = useCallback((dragID, hoverID, mode) => {\r\n\r\n        \r\n      \r\n        let pathD = getPath(dragID);\r\n        let pathH = getPath(hoverID);\r\n \r\n        const nextState = produce(stateRef.current, draft => {\r\n\r\n      \r\n            let routeD = followPath(draft, 1, pathD);\r\n\r\n            let routeH = mode!=5?followPath(draft, 1, pathH) : followPath(draft, 0, pathH);\r\n\r\n\r\n            let dragIndex = getNodeIndex(dragID, draft);\r\n         \r\n            let tempNode = routeD.children[dragIndex];\r\n\r\n           //console.log(\"the current index from swapNodes: \"+ dragIndex +\" the current ID :\" +dragID +\" the object : \" +JSON.stringify(draft) )\r\n        \r\n            let hoverIndex = getNodeIndex(hoverID);\r\n\r\n            removeNode(draft, routeD,dragIndex, false);\r\n           \r\n            //0 comes from the top is moved to the top side of hover\r\n            //1 comes from the bottom is moved to the top side of hover\r\n            switch(mode)\r\n            {\r\n                case 0:addNode(draft, routeH, tempNode,   hoverIndex);break;\r\n                case 1:addNode(draft, routeH, tempNode,   hoverIndex+1);break;\r\n                case 5:pushNode(draft, routeH, tempNode);break;\r\n\r\n            }\r\n\r\n \r\n        })\r\n\r\n        updateState(nextState);\r\n\r\n\r\n        });\r\n\r\n        const tryToSwapNodes = useCallback((dragID, hoverID, quadrant) =>\r\n        {\r\n             let pathD = getPath(dragID);\r\n            let pathH = getPath(hoverID);\r\n           \r\n            let rel = getNodeRelationship(pathD, pathH);\r\n\r\n\r\n            if(rel.isAncestor)\r\n            {\r\n                return;\r\n            }\r\n\r\n            switch(quadrant)\r\n            {\r\n                case 0:break;\r\n                \r\n                case 1: //1 or 2\r\n                case 2:\r\n                    if(rel.isBefore)\r\n                    {\r\n                        !rel.isExactlyBefore && swapNodes(dragID, hoverID, 0);\r\n                    }\r\n                    else\r\n                    {\r\n                        swapNodes(dragID, hoverID, 0);\r\n                      \r\n                    }\r\n                    \r\n                    break;\r\n                case 3: // 3 or 4\r\n                case 4:\r\n                    if(rel.isExactlyAfter)\r\n                            break;\r\n\r\n                    if(rel.isExactlyBefore){   \r\n                        swapNodes(dragID, hoverID, 0);\r\n                    }\r\n                    else{\r\n                        swapNodes(dragID, hoverID, 1);\r\n                    }\r\n                    \r\n                    break;\r\n                case 5://five is center\r\n                    swapNodes(dragID, hoverID, 5);\r\n                    break;\r\n\r\n\r\n            }\r\n\r\n\r\n       \r\n        })\r\n\r\n\r\n       /*******STATE AFFECTING FUNCTIONS*******/\r\n       /**************************/\r\n       /****add Children****/\r\n\r\n       const addChildren = useCallback((parentID) => {\r\n\r\n\r\n            let path = getPath(parentID);\r\n     \r\n            const nextState = produce(stateRef.current, draft => {\r\n\r\n            \r\n                //Increase counter                \r\n                draft.lastID++;    \r\n\r\n                //find index with route.\r\n                \r\n                let route = followPath(draft, 0, path);\r\n\r\n                //create entry at node fast search\r\n                draft.fast[draft.treename+draft.lastID] ={ visible:true, parent:parentID, index: route.children.length}\r\n                //file system\r\n                if(config.treeType===\"file\"){\r\n                    \r\n                    draft.fast[draft.treename+draft.lastID].fileType = ItemTypes.folder.id;\r\n\r\n                }\r\n                    \r\n\r\n                let treePush = {name:\"new folder\"+draft.lastID, text:\"new folder \"+draft.lastID, id:draft.lastID, children:[]};\r\n                route.children.push(treePush)\r\n                \r\n   \r\n            })\r\n\r\n            updateState(nextState);\r\n            \r\n\r\n\r\n\r\n\r\n\r\n      }, []);\r\n\r\n      const toggleVisibility =  useCallback((nodeID)=>{\r\n\r\n        let path = getPath(nodeID);\r\n\r\n        const nextState = produce(stateRef.current, draft => {\r\n\r\n            let route = followPath(draft, 0, path);\r\n\r\n            console.log(JSON.stringify(draft.fast));\r\n            console.log(\"THE ID: \" + getID(nodeID,draft));\r\n\r\n            draft.fast[nodeID].visible = !(draft.fast[nodeID].visible); \r\n\r\n           //hack to repaint the tree without really adding data to the tree model:\r\n           /**/\r\n           /**/let hackAttribute = getID(nodeID,draft)+\"xxxr\";\r\n           /**/ \r\n           /**/route[hackAttribute]=0;\r\n           /**/\r\n           /**/delete route[hackAttribute];\r\n           /**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**/ \r\n\r\n        });\r\n\r\n        updateState(nextState);\r\n\r\n      },[]);\r\n    \r\n\r\n\r\n\r\n       const API =\r\n       {\r\n        getID:getID,\r\n        getFastData:getFastData,\r\n        getTimeStamp:getTimeStamp,\r\n        addChildren:addChildren,\r\n        deleteNode:deleteNode,\r\n        tryToSwapNodes:tryToSwapNodes,\r\n        toggleVisibility:toggleVisibility,\r\n        getFileType:getFileType,\r\n\r\n       }\r\n       \r\n\r\n\r\n\r\n \r\n\r\n        return (<>\r\n               <div className=\"treeview\" style={style}>{state.tree.children.map((card, i) => renderLeaf(card, i, API, config))}</div>\r\n\t\t\t</>);\r\n    }\r\n};\r\n\r\n\r\nexport {Controls}","\n\timport { render } from 'react-dom'\n\timport {Preprocess as Example}  from './example'\n  import {Controls} from './example'\n\timport { DndProvider } from 'react-dnd'\n\timport { HTML5Backend } from 'react-dnd-html5-backend'\n  import { useState, useRef} from 'react';\nimport reactDom from 'react-dom' \n/*\n\n  let testObject=\n  {\n    data:{\n    isRoot:true,\n    text:\"root\",\n    id:0,\n    children:\n    [{text:\"childe 1\",id:1,\n            children:[{text:\"childe 3\",id:3,\n                children:[{text:\"super son: \",id:4,children:[]},{text:\"another cute son son: \",id:5,children:[]},{text:\"third cute son : \",id:6,children:[]}]}]},\n    {text:\"childe 2\",id:2,children:[]},\n    {text:\"yet another children\",id:3,children:[]}\n    ],\n    message:\"hello world\"\n    },\n    idGen:8,\n    findRoute:function(route, depth=0){\n\n      let ans = {status: true, payload:null};\n      let path =this.data;\n\n\n      for(let i=route.length-1;i>-1+depth ;i--){\n\n\n        if(typeof path.children[route[i]]!=='undefined'){\n          path = path.children[route[i]];\n         // console.log(\"path text: \" + path.text);\n        }\n        else{\n\n          ans.status = false;\n          break;\n        }\n\n      }\n\n      if(ans.status === true){\n          ans.payload = path;\n      }\n      \n      return ans;\n    },\n    addNode:function(route)\n    {\n      let res = this.findRoute(route);\n     // console.log(\"found res : \" +JSON.stringify(res));\n      if(res.status)\n      {\n        res.payload.children.push({text:\"added children\",id:this.idGen++,children:[]})\n      }\n      return res;\n\n    },\n    deleteNode:function(route)\n    {\n      let res = this.findRoute(route,1);\n     // console.log(\"found res : \" +JSON.stringify(res));\n      if(res.status)\n      {\n        res.payload.children.splice(route[0],1);\n      }\n      return res; \n\n    },\n    moveNodes:function(routeD, routeH)\n    {\n      let resD = this.findRoute(routeD,1);\n      let resH = this.findRoute(routeH,1);\n\n      let ans = {status : false,payload:null}\n\n\n      if(resD.status && resH.status)\n      {\n        let nodeD = resD.payload.children[routeD[0]];\n        resD.payload.children.splice(routeD[0],1);\n        resH.payload.children.splice(routeH[0],0,nodeD);\n\n        return true;\n      }\n\n      return false;\n    }\n  }*/\n\n  let tree = {\n    isRoot:true,\n    children:\n    [\n        {\n            text:\"My documents\",\n            id:1,\n            children:[{\n                text:\"My videos\",\n                id:4,\n                children:[],\n                fileType:\"file\"\n            },\n            {\n                text:\"My pictures\",\n                id:5,\n                children:[]\n            }]\n        },\n        {\n            text:\"child 2\",\n            id:2,\n            children:[]\n        },\n        {\n            text:\"child 3\",\n            id:3,\n            children:[]\n        },\n        {\n          text:\"child 0\",\n          id:0,\n           children:[]\n      },\n      {\n        text:\"child -1\",\n        id:-1,\n         children:[]\n    }\n    \n    ]};\n    \n    console.log(\"FROM APP : \" + JSON.stringify(tree))\n\n\n\n\n\tfunction App() {\n\n    const callback = useRef({});\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<DndProvider backend={HTML5Backend}>\n\t\t\t\t\t<Example tree={tree} name={\"testTree\"} options={{mode:\"drop\", gutterTop:1.0, gutterBottom:1}} callback={callback}/>\n\t\t\t\t</DndProvider>\n        <div>\n          <CallbackVisualizer callback={callback}/>\n        </div>\n\t\t\t</div>\n\n\t\t)\n\t}\n\n  const CallbackVisualizer = ({callback})=>\n  {\n    const [areaState, setArea] = useState(\"\");\n\n    const handleClick =()=>{\n\n      console.log(\"callback test \" +JSON.stringify(callback.current.getData()))\n      setArea(JSON.stringify(callback.current.getData(), undefined, 4));\n    }\n\n    return(\n      <>\n      <button onClick={handleClick}>Get the tree</button>\n      <textarea value={areaState} />\n      \n    </>\n    );\n  }\n\n\tconst rootElement = document.getElementById('root')\n\trender(<App />, rootElement)\n"],"sourceRoot":""}